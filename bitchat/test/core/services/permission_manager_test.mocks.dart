// Mocks generated by Mockito 5.4.6 from annotations
// in bitchat/test/core/services/permission_manager_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bitchat/core/models/permission.dart' as _i6;
import 'package:bitchat/core/models/platform_event.dart' as _i5;
import 'package:bitchat/core/models/platform_info.dart' as _i2;
import 'package:bitchat/core/services/platform_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlatformInfo_0 extends _i1.SmartFake implements _i2.PlatformInfo {
  _FakePlatformInfo_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [PlatformService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlatformService extends _i1.Mock implements _i3.PlatformService {
  MockPlatformService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i5.PlatformEvent> get platformEvents =>
      (super.noSuchMethod(
            Invocation.getter(#platformEvents),
            returnValue: _i4.Stream<_i5.PlatformEvent>.empty(),
          )
          as _i4.Stream<_i5.PlatformEvent>);

  @override
  _i4.Future<bool> requestPermissions(List<_i6.Permission>? permissions) =>
      (super.noSuchMethod(
            Invocation.method(#requestPermissions, [permissions]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<Map<_i6.Permission, _i6.PermissionStatus>> getPermissionStatus(
    List<_i6.Permission>? permissions,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getPermissionStatus, [permissions]),
            returnValue:
                _i4.Future<Map<_i6.Permission, _i6.PermissionStatus>>.value(
                  <_i6.Permission, _i6.PermissionStatus>{},
                ),
          )
          as _i4.Future<Map<_i6.Permission, _i6.PermissionStatus>>);

  @override
  _i4.Future<_i2.PlatformInfo> getPlatformInfo() =>
      (super.noSuchMethod(
            Invocation.method(#getPlatformInfo, []),
            returnValue: _i4.Future<_i2.PlatformInfo>.value(
              _FakePlatformInfo_0(
                this,
                Invocation.method(#getPlatformInfo, []),
              ),
            ),
          )
          as _i4.Future<_i2.PlatformInfo>);

  @override
  _i4.Future<void> setBackgroundMode(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setBackgroundMode, [enabled]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> getBackgroundModeStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getBackgroundModeStatus, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> isCapabilitySupported(_i2.PlatformCapability? capability) =>
      (super.noSuchMethod(
            Invocation.method(#isCapabilitySupported, [capability]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<_i2.PerformanceProfile> getPerformanceProfile() =>
      (super.noSuchMethod(
            Invocation.method(#getPerformanceProfile, []),
            returnValue: _i4.Future<_i2.PerformanceProfile>.value(
              _i2.PerformanceProfile.high,
            ),
          )
          as _i4.Future<_i2.PerformanceProfile>);

  @override
  _i4.Future<void> optimizeForBattery() =>
      (super.noSuchMethod(
            Invocation.method(#optimizeForBattery, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i2.BatteryOptimizationStatus> getBatteryOptimizationStatus() =>
      (super.noSuchMethod(
            Invocation.method(#getBatteryOptimizationStatus, []),
            returnValue: _i4.Future<_i2.BatteryOptimizationStatus>.value(
              _i2.BatteryOptimizationStatus.enabled,
            ),
          )
          as _i4.Future<_i2.BatteryOptimizationStatus>);

  @override
  _i4.Future<void> dispose() =>
      (super.noSuchMethod(
            Invocation.method(#dispose, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
